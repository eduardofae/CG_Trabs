#include "cube.hpp"

std::vector<GLfloat> get_vertices() {
    float v[NumVertices][3] = {
        {  0.50f,  0.50f,  0.50f }, // 0
        {  0.50f, -0.50f,  0.50f }, // 1
        {  0.50f,  0.50f, -0.50f }, // 2
        {  0.50f, -0.50f, -0.50f }, // 3
        { -0.50f,  0.50f,  0.50f }, // 4
        { -0.50f, -0.50f,  0.50f }, // 5
        { -0.50f,  0.50f, -0.50f }, // 6
        { -0.50f, -0.50f, -0.50f }  // 7
    };

    std::vector<GLfloat> triangle = {
         v[0][0], v[0][1], v[0][2] ,  v[1][0], v[1][1], v[1][2] ,  v[3][0], v[3][1], v[3][2] ,
         v[0][0], v[0][1], v[0][2] ,  v[3][0], v[3][1], v[3][2] ,  v[2][0], v[2][1], v[2][2] ,

         v[0][0], v[0][1], v[0][2] ,  v[5][0], v[5][1], v[5][2] ,  v[1][0], v[1][1], v[1][2] ,
         v[0][0], v[0][1], v[0][2] ,  v[4][0], v[4][1], v[4][2] ,  v[5][0], v[5][1], v[5][2] ,

         v[0][0], v[0][1], v[0][2] ,  v[2][0], v[2][1], v[2][2] ,  v[6][0], v[6][1], v[6][2] ,
         v[0][0], v[0][1], v[0][2] ,  v[6][0], v[6][1], v[6][2] ,  v[4][0], v[4][1], v[4][2] ,

         v[7][0], v[7][1], v[7][2] ,  v[5][0], v[5][1], v[5][2] ,  v[4][0], v[4][1], v[4][2] ,
         v[7][0], v[7][1], v[7][2] ,  v[4][0], v[4][1], v[4][2] ,  v[6][0], v[6][1], v[6][2] ,

         v[7][0], v[7][1], v[7][2] ,  v[6][0], v[6][1], v[6][2] ,  v[2][0], v[2][1], v[2][2] ,
         v[7][0], v[7][1], v[7][2] ,  v[2][0], v[2][1], v[2][2] ,  v[3][0], v[3][1], v[3][2] ,

         v[7][0], v[7][1], v[7][2] ,  v[5][0], v[5][1], v[5][2] ,  v[1][0], v[1][1], v[1][2] ,
         v[7][0], v[7][1], v[7][2] ,  v[1][0], v[1][1], v[1][2] ,  v[3][0], v[3][1], v[3][2] 
    };

    return triangle;
}

std::vector<GLfloat> get_colors() {
    float c[NumVertices][3] = {
        {  1.00f,  0.00f, 0.00f  },
        {  1.00f,  0.00f, 0.00f  },
        {  1.00f,  0.00f, 0.00f  },
        {  1.00f,  0.00f, 0.00f  },
        {  1.00f,  0.00f, 0.00f  },
        {  1.00f,  0.00f, 0.00f  },
        {  1.00f,  0.00f, 0.00f  },
        {  1.00f,  0.00f, 0.00f  }
    };

    std::vector<GLfloat> colors = {
         c[0][0], c[0][1], c[0][2] ,  c[1][0], c[1][1], c[1][2] ,  c[3][0], c[3][1], c[3][2] ,
         c[0][0], c[0][1], c[0][2] ,  c[3][0], c[3][1], c[3][2] ,  c[2][0], c[2][1], c[2][2] ,

         c[0][0], c[0][1], c[0][2] ,  c[5][0], c[5][1], c[5][2] ,  c[1][0], c[1][1], c[1][2] ,
         c[0][0], c[0][1], c[0][2] ,  c[4][0], c[4][1], c[4][2] ,  c[5][0], c[5][1], c[5][2] ,

         c[0][0], c[0][1], c[0][2] ,  c[2][0], c[2][1], c[2][2] ,  c[6][0], c[6][1], c[6][2] ,
         c[0][0], c[0][1], c[0][2] ,  c[6][0], c[6][1], c[6][2] ,  c[4][0], c[4][1], c[4][2] ,

         c[7][0], c[7][1], c[7][2] ,  c[5][0], c[5][1], c[5][2] ,  c[4][0], c[4][1], c[4][2] ,
         c[7][0], c[7][1], c[7][2] ,  c[4][0], c[4][1], c[4][2] ,  c[6][0], c[6][1], c[6][2] ,

         c[7][0], c[7][1], c[7][2] ,  c[6][0], c[6][1], c[6][2] ,  c[2][0], c[2][1], c[2][2] ,
         c[7][0], c[7][1], c[7][2] ,  c[2][0], c[2][1], c[2][2] ,  c[3][0], c[3][1], c[3][2] ,

         c[7][0], c[7][1], c[7][2] ,  c[5][0], c[5][1], c[5][2] ,  c[1][0], c[1][1], c[1][2] ,
         c[7][0], c[7][1], c[7][2] ,  c[1][0], c[1][1], c[1][2] ,  c[3][0], c[3][1], c[3][2] 
    };

    return colors;
}